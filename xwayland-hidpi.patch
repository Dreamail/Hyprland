diff --git a/src/protocols/PointerConstraints.cpp b/src/protocols/PointerConstraints.cpp
index 30ab0a55218..369f923f160 100644
--- a/src/protocols/PointerConstraints.cpp
+++ b/src/protocols/PointerConstraints.cpp
@@ -7,6 +7,7 @@
 #include "../managers/input/InputManager.hpp"
 #include "../render/Renderer.hpp"
 #include "../helpers/Monitor.hpp"
+#include "../xwayland/XWayland.hpp"
 
 CPointerConstraint::CPointerConstraint(SP<CZwpLockedPointerV1> resource_, SP<CWLSurfaceResource> surf, wl_resource* region_, zwpPointerConstraintsV1Lifetime lifetime_) :
     resourceL(resource_), locked(true), lifetime(lifetime_) {
@@ -37,7 +38,7 @@ CPointerConstraint::CPointerConstraint(SP<CZwpLockedPointerV1> resource_, SP<CWL
         const auto PWINDOW = pHLSurface->getWindow();
         if (PWINDOW) {
             const auto ISXWL = PWINDOW->m_bIsX11;
-            scale            = ISXWL && *PXWLFORCESCALEZERO ? PWINDOW->m_fX11SurfaceScaledBy : 1.f;
+            scale            = ISXWL ? (*PXWLFORCESCALEZERO ? PWINDOW->m_fX11SurfaceScaledBy : g_pXWayland->pWM->getScale()) : 1.f;
         }
 
         positionHint = {wl_fixed_to_double(x) / scale, wl_fixed_to_double(y) / scale};
diff --git a/src/xwayland/XSurface.cpp b/src/xwayland/XSurface.cpp
index 91f20be5210..d672ffd0c9b 100644
--- a/src/xwayland/XSurface.cpp
+++ b/src/xwayland/XSurface.cpp
@@ -166,7 +166,8 @@ void CXWaylandSurface::configure(const CBox& box) {
     geometry = box;
 
     uint32_t mask     = XCB_CONFIG_WINDOW_X | XCB_CONFIG_WINDOW_Y | XCB_CONFIG_WINDOW_WIDTH | XCB_CONFIG_WINDOW_HEIGHT | XCB_CONFIG_WINDOW_BORDER_WIDTH;
-    uint32_t values[] = {box.x, box.y, box.width, box.height, 0};
+    uint32_t values[] = {g_pXWayland->pWM->applyScale(box.x), g_pXWayland->pWM->applyScale(box.y), g_pXWayland->pWM->applyScale(box.width),
+                         g_pXWayland->pWM->applyScale(box.height), 0};
     xcb_configure_window(g_pXWayland->pWM->connection, xID, mask, values);
 
     if (geometry.width == box.width && geometry.height == box.height) {
@@ -175,10 +176,10 @@ void CXWaylandSurface::configure(const CBox& box) {
         e.response_type     = XCB_CONFIGURE_NOTIFY;
         e.event             = xID;
         e.window            = xID;
-        e.x                 = box.x;
-        e.y                 = box.y;
-        e.width             = box.width;
-        e.height            = box.height;
+        e.x                 = g_pXWayland->pWM->applyScale(box.x);
+        e.y                 = g_pXWayland->pWM->applyScale(box.y);
+        e.width             = g_pXWayland->pWM->applyScale(box.width);
+        e.height            = g_pXWayland->pWM->applyScale(box.height);
         e.border_width      = 0;
         e.above_sibling     = XCB_NONE;
         e.override_redirect = overrideRedirect;
diff --git a/src/xwayland/XWM.cpp b/src/xwayland/XWM.cpp
index a4e3289b7c7..ff652cb1966 100644
--- a/src/xwayland/XWM.cpp
+++ b/src/xwayland/XWM.cpp
@@ -39,8 +39,9 @@ void CXWM::handleCreate(xcb_create_notify_event_t* e) {
     if (isWMWindow(e->window))
         return;
 
-    const auto XSURF = surfaces.emplace_back(SP<CXWaylandSurface>(new CXWaylandSurface(e->window, CBox{e->x, e->y, e->width, e->height}, e->override_redirect)));
-    XSURF->self      = XSURF;
+    const auto XSURF = surfaces.emplace_back(
+        SP<CXWaylandSurface>(new CXWaylandSurface(e->window, CBox{applyUnScale(e->x), applyUnScale(e->y), applyUnScale(e->width), applyUnScale(e->height)}, e->override_redirect)));
+    XSURF->self = XSURF;
     Debug::log(LOG, "[xwm] New XSurface at {:x} with xid of {}", (uintptr_t)XSURF.get(), e->window);
 
     const auto WINDOW = CWindow::create(XSURF);
@@ -70,9 +71,9 @@ void CXWM::handleConfigureRequest(xcb_configure_request_event_t* e) {
     if (!(MASK & GEOMETRY))
         return;
 
-    XSURF->events.configureRequest.emit(CBox{MASK & XCB_CONFIG_WINDOW_X ? e->x : XSURF->geometry.x, MASK & XCB_CONFIG_WINDOW_Y ? e->y : XSURF->geometry.y,
-                                             MASK & XCB_CONFIG_WINDOW_WIDTH ? e->width : XSURF->geometry.width,
-                                             MASK & XCB_CONFIG_WINDOW_HEIGHT ? e->height : XSURF->geometry.height});
+    XSURF->events.configureRequest.emit(
+        CBox{MASK & XCB_CONFIG_WINDOW_X ? applyUnScale(e->x) : XSURF->geometry.x, MASK & XCB_CONFIG_WINDOW_Y ? applyUnScale(e->y) : XSURF->geometry.y,
+             MASK & XCB_CONFIG_WINDOW_WIDTH ? applyUnScale(e->width) : XSURF->geometry.width, MASK & XCB_CONFIG_WINDOW_HEIGHT ? applyUnScale(e->height) : XSURF->geometry.height});
 }
 
 void CXWM::handleConfigureNotify(xcb_configure_notify_event_t* e) {
@@ -81,10 +82,11 @@ void CXWM::handleConfigureNotify(xcb_configure_notify_event_t* e) {
     if (!XSURF)
         return;
 
-    if (XSURF->geometry == CBox{e->x, e->y, e->width, e->height})
+    const CBox geom = {applyUnScale(e->x), applyUnScale(e->y), applyUnScale(e->width), applyUnScale(e->height)};
+    if (XSURF->geometry == geom)
         return;
 
-    XSURF->geometry = {e->x, e->y, e->width, e->height};
+    XSURF->geometry = geom;
     updateOverrideRedirect(XSURF, e->override_redirect);
     XSURF->events.setGeometry.emit();
 }
@@ -261,6 +263,17 @@ void CXWM::readProp(SP<CXWaylandSurface> XSURF, uint32_t atom, xcb_get_property_
 
             xcb_icccm_get_wm_size_hints_from_reply(XSURF->sizeHints.get(), reply);
 
+            XSURF->sizeHints->x           = applyUnScale(XSURF->sizeHints->x);
+            XSURF->sizeHints->y           = applyUnScale(XSURF->sizeHints->y);
+            XSURF->sizeHints->width       = applyUnScale(XSURF->sizeHints->width);
+            XSURF->sizeHints->height      = applyUnScale(XSURF->sizeHints->height);
+            XSURF->sizeHints->min_width   = applyUnScale(XSURF->sizeHints->min_width);
+            XSURF->sizeHints->min_height  = applyUnScale(XSURF->sizeHints->min_height);
+            XSURF->sizeHints->max_width   = applyUnScale(XSURF->sizeHints->max_width);
+            XSURF->sizeHints->max_height  = applyUnScale(XSURF->sizeHints->max_height);
+            XSURF->sizeHints->base_width  = applyUnScale(XSURF->sizeHints->base_width);
+            XSURF->sizeHints->base_height = applyUnScale(XSURF->sizeHints->base_height);
+
             const int32_t FLAGS   = XSURF->sizeHints->flags;
             const bool    HASMIN  = (FLAGS & XCB_ICCCM_SIZE_HINT_P_MIN_SIZE);
             const bool    HASBASE = (FLAGS & XCB_ICCCM_SIZE_HINT_BASE_SIZE);
@@ -294,8 +307,20 @@ void CXWM::readProp(SP<CXWaylandSurface> XSURF, uint32_t atom, xcb_get_property_
 void CXWM::handlePropertyNotify(xcb_property_notify_event_t* e) {
     const auto XSURF = windowForXID(e->window);
 
-    if (!XSURF)
+    if (!XSURF) {
+        if (e->atom == HYPRATOMS["_XWAYLAND_GLOBAL_OUTPUT_SCALE"]) {
+            xcb_get_property_cookie_t cookie = xcb_get_property(connection, 0, e->window, e->atom, XCB_ATOM_ANY, 0, 2048);
+            xcb_get_property_reply_t* reply  = xcb_get_property_reply(connection, cookie, nullptr);
+            if (!reply) {
+                return;
+            }
+            if (reply->type == XCB_ATOM_CARDINAL) {
+                scale = *(uint32_t*)xcb_get_property_value(reply);
+            }
+            free(reply);
+        }
         return;
+    }
 
     xcb_get_property_cookie_t cookie = xcb_get_property(connection, 0, XSURF->xID, e->atom, XCB_ATOM_ANY, 0, 2048);
     xcb_get_property_reply_t* reply  = xcb_get_property_reply(connection, cookie, nullptr);
@@ -1304,6 +1329,18 @@ SP<IDataOffer> CXWM::createX11DataOffer(SP<CWLSurfaceResource> surf, SP<IDataSou
     return offer;
 }
 
+double CXWM::getScale() {
+    return scale;
+}
+
+double CXWM::applyScale(double val) {
+    return std::floor(val * scale);
+}
+
+double CXWM::applyUnScale(double val) {
+    return std::ceil(val / scale);
+}
+
 void SXSelection::onSelection() {
     if (g_pSeatManager->selection.currentSelection && g_pSeatManager->selection.currentSelection->type() == DATA_SOURCE_TYPE_X11)
         return;
diff --git a/src/xwayland/XWM.hpp b/src/xwayland/XWM.hpp
index 4326c77b1e1..c3504fbbc8c 100644
--- a/src/xwayland/XWM.hpp
+++ b/src/xwayland/XWM.hpp
@@ -112,6 +112,7 @@ class CXWM {
     int                onEvent(int fd, uint32_t mask);
     SP<CX11DataDevice> getDataDevice();
     SP<IDataOffer>     createX11DataOffer(SP<CWLSurfaceResource> surf, SP<IDataSource> source);
+    double             getScale();
 
   private:
     void                 setCursor(unsigned char* pixData, uint32_t stride, const Vector2D& size, const Vector2D& hotspot);
@@ -175,12 +176,16 @@ class CXWM {
 
     SXSelection* getSelection(xcb_atom_t atom);
 
+    double       applyScale(double val);
+    double       applyUnScale(double val);
+
     //
     CXCBConnection                            connection;
     xcb_errors_context_t*                     errors = nullptr;
     xcb_screen_t*                             screen = nullptr;
 
     xcb_window_t                              wmWindow;
+    double                                    scale = 1.0;
 
     wl_event_source*                          eventSource = nullptr;
 
diff --git a/src/xwayland/XWayland.hpp b/src/xwayland/XWayland.hpp
index af8d957c0a7..ff793d5abd1 100644
--- a/src/xwayland/XWayland.hpp
+++ b/src/xwayland/XWayland.hpp
@@ -130,5 +130,6 @@ inline std::unordered_map<std::string, uint32_t> HYPRATOMS = {
     HYPRATOM("DELETE"),
     HYPRATOM("TEXT"),
     HYPRATOM("INCR"),
+    HYPRATOM("_XWAYLAND_GLOBAL_OUTPUT_SCALE"),
 #endif
 };
